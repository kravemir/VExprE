options {
  STATIC = false;
}

PARSER_BEGIN(VExprEParser)
package org.kravemir.vexpre.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.kravemir.vexpre.api.*;
import org.kravemir.vexpre.values.*;

/** Simple brace matcher. */
public class VExprEParser {

  private InputContext inputContext;

  public void setInputContext(InputContext inputContext) {
      this.inputContext = inputContext;
  }
}

PARSER_END(VExprEParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
    <LBRACE: "{">
|   <RBRACE: "}">
|   <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|   <FNUM: <DIGIT>(<DIGIT>)*("."(<DIGIT>)*)? >
|   < #LETTER: ["_","a"-"z","A"-"Z"] >
|   < #DIGIT: ["0"-"9"] >
}


Value expression() :
{ Value val; }
{
    val=add() <EOF>
    { return val; }
}

List<Value> expressionList() :
{ List<Value> values; Value value; }
{
    value=add() { values = new ArrayList<Value>(); values.add(value); }
    ( "," value=add() { values.add(value); } )*

    { return values; }
}

Value add():
{ Value value, r; }
{
    value=mult()
    (   "+" r=mult() { value = value.add(r); }
    |   "-" r=mult() { value = value.sub(r); }
    )*

    { return value; }
}

Value mult():
{ Value value, r; }
{
    value=power()
    (   "*" r=power() { value = value.mul(r); }
    |   "/" r=power() { value = value.div(r); }
    )*

    { return value; }
}

Value power():
{ Value value; List<Value> exprs; Token i; }
{
    value=atom()
    (   "(" exprs=expressionList() ")" { value = value.call(exprs.toArray(new Value[exprs.size()])); }
    |   "." i=<IDENTIFIER> { value = value.getChild(i.toString()); }
    )*

    { return value; }
}

Value atom():
{ Value value; Token s; }
{
   ( s=<FNUM> { return new DoubleValue(s.toString()); } )
|  ( s=<IDENTIFIER> { return inputContext.getOrThrow(s.toString()); } )
|  ( "(" value=add() ")" { return value; } )
}